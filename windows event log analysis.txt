let's learn about complete Windows event log analysis
Windows log management comprises collecting, storing, analyzing, and monitoring logs from Microsoft Windows operating system and Windows applications
Windows Event Logs are an integral part of Windows event logging. Windows event logs include both actions taken by users and by processes executing on the computer.
An event log is a chronological record of system, security, and application events on a Windows operating system computer.
Windows activity logs are detailed records kept by the Windows operating system of many different events associated with system operation, user activities, security, and application functioning.
There are 5 main types of logs in windows
   system logs generated by the windows os ( startup, shutdown, driver failures, hardware issues)
   Monitoring changes in files, especially in critical directories like System32 or suspicious temporary directories. (File System Monitoring)
   application logs related to the apps installed in the system (app crashes, errors, warnings)
   = Monitoring application logs assists administrators in diagnosing and solving application problems, thereby ensuring the reliability and availability of vital business 
     applications
   security logs track events like successful and failed login attempts, resource access like files, folders, system settings, privilege escalations, policy changes
     =This is important for auditing purposes and ensuring compliance with security policies, helping to maintain the integrity and security of the system.
   setup logs are generated when we are setting up the machine like Windows ( installation process, setup configurations)
     =Setup Configurations: Records information about system configurations during the setup process.
    = Setup log files record events associated with the success and failure of installations, configuration changes, and setup-related errors. 
    = Monitoring setup logs is the key to verification of successful deployment of software updates and new applications, as well as troubleshooting installation and 
      configuration issues. 
   forwarded events are centralized logs from multiple computers sent to a single Windows event collector(useful for centralized Windows log monitoring)
   Windows Powershell logs keep track of events related to PowerShell script execution, cmdlet usage, and administrative actions carried out using PowerShell.
Windows Event Viewer is a Windows application that lets you see your computer's logs, warnings, and other events. Each application you open generates entries that are recorded in an activity log, which can be viewed from the Event Viewer.
Windows Log Location = C:\\Windows\\System32\\winevt\\Logs
The key components of an Event Viewer entry are:
Date and Time: When the event occurred.
Source: The application or system component that generated the event.
Event ID: A unique identifier for the event type.
Level: The severity of the event (Information, Warning, Error, Critical).
User: The user account under which the event occurred.
Computer: The name of the computer where the event was logged.
Description: Detailed information about the event.
============================================= SIEM INSTALLATION PATHS =================================
Now based on different siem tools they might install agents in different places in different folders
During installation, administrators may choose custom paths.
C:\Program Files (x86)\, Program Files\Splunk
Main event log files are stored in C:\\Windows\\System32\\winevt\\Logs
To determine the exact location of the SIEM agent on a specific system, you can look for the following:
Control Panel: Check the list of installed programs to find the SIEM agent.
## method 1: Using the Registry Editor##
Open Registry Editor:
Press Win + R, type regedit, and press Enter.
Navigate to SIEM Agent Keys:
Common locations to check include:
HKEY_LOCAL_MACHINE\SOFTWARE\
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\ you will find the location where the agent is installed
============================ Registry Events, WMI, and HKEY Concepts =========================================
This “Registry” is a special database that keeps all the important instructions for how Windows, its programs, and hardware work together.
The Windows Registry is a centralized key-value database that stores permissions, user data, and configuration settings for the Windows operating system and many Windows native applications
 The keys stored in the registry provide a granular view into the processes occurring on a Windows host, such as certificate expirations, security checks, and pending reboots.
The Windows Registry is a hierarchical database where Windows stores configuration settings.
HKEY_LOCAL_MACHINE (HKLM) and HKEY_CURRENT_USER (HKCU) are important hives. Attackers can modify registry keys in these hives to establish persistence or escalate privileges.
WMI (Windows Management Instrumentation)
WMI allows for querying information from a system or performing actions on remote machines.
Attackers can abuse WMI to execute remote commands or move laterally between systems without dropping files on disk (fileless malware).
Event logs for WMI can indicate such suspicious activity.  
WMI logs can be found under the following path in Event Viewer
WMI (Windows Management Instrumentation) Logs  Applications and Services Logs > Microsoft > Windows > WMI-Activity    WMI-Activity/Operational
Windows Registry logs are stored under Security Event Logs in Event Viewer: Windows Logs > Security
PowerShell Logs: Applications and Services Logs > Microsoft > Windows > PowerShell/Operational some logs might be under Windows PowerShell in the Security and System logs.
sysmon is a powerful Windows system service that provides detailed information about process creation, network connections, file creation, and changes in the system. 
It generates logs that are more granular than native Windows logs.
Sysmon events are stored under:
Applications and Services Logs > Microsoft > Windows > Sysmon/Operational
Audit Policies  Windows allows admins to configure audit policies to log specific actions like object access, registry changes, process creation, and privilege escalation.
Monitoring LOLBAS tools involves tracking Process creation WMI activity PowerShell logging 
 Windows Registry is a hierarchical database that stores low-level settings for the Microsoft Windows operating system and for applications that opt to use the registry on runtime
Adversaries use various techniques to achieve persistence on the network and connect back to their CnC ( Command and Control ) server. The most common way is Registry key value modification
What are the Run keys in the Registry?
registry holds a set of keys, which will handle the operating system setting for the device drivers, services, Security Accounts Manager, user interface, etc.
 Adding the new string under the run key will execute a specific program at user boot or logon.
to open the registry editor press windows + r and type regedit > You will find the computer, hkey class root, hkey current user, hkey local machine, hkey users, hkey current configurations type folders on the left panel
in registry editor > computer> HKEY_CURRENT > MICROSOFT > IF YOU ADDED A NEW STRING IT WILL RUN AT BOOT PROCESS THIS IS HOW ATTACKERS DO
Threat actors May use Windows terminal to add their specific application which needs to be executed the next boot time
Below registry keys can also help attackers to be persistent on Windows for a long time to steal confidential data and exfiltrate their domains.
HKLM\Software\Microsoft\Windows\CurrentVersion\Run: Often used by attackers to auto-launch malware at startup.
HKLM\SYSTEM\CurrentControlSet\Services: Attackers often create new services to maintain persistence.
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce
KEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit
In addition to one of the above behaviors, Figure out & find the Event ID: 4657 in your Log analytics tool. This event ID will help soc analysts /Incident responders to find the registry value changes.
APT-Hunter is the threat-hunting tool for Windows event logs which will detect APT movements and uncover suspicious activities
Gather and analyze ( Sysmon , Security , System , Powershell , Powershell_Operational , ScheduledTask , WinRM , TerminalServices , Windows_Defender ) .
A Guide to Windows Directories for SOC Analysts
Yes, the Windows Registry can come under File Integrity Monitoring (FIM) in certain contexts
File Integrity Monitoring (FIM) refers to the process of monitoring and detecting changes to critical files, directories, and system configurations.
It's used to ensure that sensitive system files and configurations have not been tampered with by unauthorized users, malware, or attackers.
Mention the Keypath that you want to monitor
You find a log from the Windows Registry with the subkey:
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon and with a value that has just changed from 0 to 1, indicating that this machine has recently been switched to automatic logon.
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon and with a value that has just changed from 0 to 1, indicating that this machine has recently been switched to automatic logon. 
in this, it says converting from zero to 1 indicates automatic login but when these events are trigging with wazuh, splunk, or other tools sometimes it might happen because of system settings or automatic when to consider these registry events are malicious
In Windows environments, the registry key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon with its specific values can indeed be manipulated to enable automatic logon, 
which could either be a legitimate system change or an indicator of malicious activity.
Check for Administrative Context
Legitimate Use: If an authorized user or IT admin has enabled automatic logon for system convenience (e.g., for a shared system or a test environment), it is likely benign.
Malicious Use: An attacker may enable automatic logon after gaining access to maintain persistence and ensure they don’t have to re-enter credentials after rebooting the system. This could be done post-exploitation, such as after installing malware or backdoors.
 User Activity and Account Context
If the change is linked to an administrator or system account, it could be part of standard configuration.
If the change is linked to an unfamiliar user account, especially one with elevated privileges, that could be suspicious.
Correlate with Group Policy or Other System Settings
If the change aligns with Group Policy settings or other automation tools, it could be benign. Review logs or policies for any recent changes in automatic logon behavior.
If this change occurs independently of known system policies, it could be the result of tampering.
Changes to key registry hives or specific keys (e.g., Run, RunOnce, Services, etc.) can indicate potential security risks, such as malware trying to maintain persistence or unauthorized changes to system settings.
Group Policy is a feature in Microsoft Windows that provides centralized management and configuration of operating systems, applications, and user settings in an Active Directory environment
 It allows IT administrators to define rules for users and computers within an organization, controlling aspects such as security settings, user interface behavior, system configurations, and software installation.
In a nutshell, the Windows Registry is a powerful tool for advanced users to customize their computers, but it’s also a place where you should tread carefully to avoid problem
The Registry is like the heart of your computer. It helps everything run smoothly. Skilled users can use it to make their computer do extraordinary things that aren’t usually possible.

Windows Registry in Cybersecurity:

Configuration Management: It stores settings that control how your operating system and software behave. Cyber attackers may manipulate these settings to perform malicious activities, such as automatically running malware upon system startup.

Persistence: Cyber threats aim to establish persistence on compromised systems, allowing them to maintain control and continue their malicious activities. Achieving persistence often involves modifying the Registry to ensure that malicious code runs consistently.

Evasion: Attackers may employ rootkits and other techniques to hide their presence from security software. These techniques often involve manipulating the Registry to bypass security measures.
Anomalous Timestamps: Keep an eye on the timestamps of registry key modifications. Unexpected changes during non-standard hours or in close proximity to security incidents can be a red flag.
Unrecognized Software: If you encounter unfamiliar software, scripts, or executables in the registry, investigate their origins and purposes.

Integrity Verification Tools: Use tools like Windows File Protection (WFP) or Windows Resource Protection (WRP) to check the integrity of key system files and their corresponding registry settings.
Example: Running a WRP scan reveals inconsistencies between system files and their registry configurations.

question 
i have a doubt when attackers try to change any windows registry file to avoid detection or evasion ,may be we can keep a correct of the windows key files and
using group policy can we push in the user machine as a security practise 

Attackers often target the registry to hide their presence or evade detection. Implementing a strategy to ensure the integrity of these files can help detect and mitigate such activities.
Step 1: Baseline the Registry
Use a tool like regedit or PowerShell to export the current state of the registry keys you want to monitor.
Save these exports in a secure location.
 Implement Integrity Checking
Use a hashing algorithm (e.g., SHA-256) to create a hash of the registry files. This hash serves as a unique identifier for the current state of the files.
Store these hashes in a secure location.
Schedule Regular Integrity Checks:

Use a script or a monitoring tool to periodically check the hashes of the registry files against the stored hashes.
Tools like PowerShell, Sysinternals Suite (e.g., PsExec, PsTools), or third-party solutions like Tripwire can be used for this purpose.
Step 3: Use Group Policy to Push Configuration
Create a Group Policy Object (GPO):

Open the Group Policy Management Console (GPMC).
Create a new GPO or edit an existing one.
Configure Scripts:

Navigate to Computer Configuration -> Policies -> Windows Settings -> Scripts (Startup/Shutdown).
Add a startup script that runs the integrity check script.
Deploy the GPO:

Link the GPO to the appropriate Organizational Units (OUs) in Active Directory.
Ensure that the GPO is applied to all relevant machines.
Step 4: Monitor and Alert
Monitor Logs:

Ensure that the integrity check script logs any discrepancies found.
Use a centralized logging solution (e.g., SIEM) to collect and analyze these logs.
Alert on Changes:

Configure alerts to notify the security team whenever a discrepancy is detected.
This can be done using the logging and alerting capabilities of your SIEM or other monitoring tools.
did i asked the right question and what about sometime those registry files will automatically change or get updated so the 
hash values will also change when created a script to check the hash value and then both does match will it cause error

Strategies to Handle Legitimate Changes
Version Control:

Maintain a version history of the registry files. This can help you track changes over time and determine if a change is legitimate or not.
Whitelisting Changes:

Create a whitelist of expected changes. For example, if you know that a specific update will modify a certain registry key, you can note this in your whitelist.
Time-Based Monitoring:

Implement time-based monitoring to detect sudden, unexpected changes. Legitimate updates often occur during specific maintenance windows or update cycles.
Change Logs:

Use change logs to track authorized changes. This can help you quickly identify and verify if a change is expected.
Baseline Updates:

Periodically update your baseline to include legitimate changes. This ensures that your monitoring tools are aware of the new state and can detect future unauthorized changes more effectively.

Interview Answer: "Yes, attackers often try to modify critical registry keys in Windows to evade detection or disable security settings.
One way to mitigate this risk is by using Group Policy to push the correct registry values and ensure they stay consistent across the network.
For example, if an attacker tries to modify a key like AutoAdminLogon or disable UAC settings, Group Policy can automatically revert the changes, maintaining system security.

Additionally, by combining Group Policy enforcement with registry auditing, we can detect unauthorized changes in real-time and send alerts to SIEM tools like Wazuh or Splunk. 
This approach not only prevents malicious modifications but also provides visibility into potential evasion attempts.
It's a proactive defense mechanism that can help maintain the integrity of critical system configurations in a large-scale environment."

Audit and Monitor Registry Changes: In addition to enforcing registry settings via Group Policy, you should enable auditing to detect unauthorized changes to critical registry keys.
This allows you to log any changes made to the specified registry values, which can help you detect tampering or evasion attempts.
You can combine this with auditing and alerting mechanisms via SIEM tools (like Wazuh or Splunk) to detect any attempt to tamper with critical registry settings. Alerts can be triggered when unauthorized changes occur

To audit changes to critical registry keys, I would enable Windows built-in auditing for those specific keys. The process involves configuring Group Policy to track any changes made to the registry, and this can log both successful and failed attempts to modify the key.

My focus would be on monitoring high-risk areas, such as:

Winlogon keys that manage user login behavior,
Run and RunOnce keys that control startup applications,
Windows Defender and security settings keys, and
Keys related to system services and network policies.

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control

Here are the key names that I mentioned, along with their full paths:

Service startup behavior:

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
Security-related settings:

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control
LSA (Local Security Authority) settings:

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa
Session Manager settings:

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager
Network configurations:

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
Windows Firewall settings:

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy

 Winlogon Keys: Location: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
Run and RunOnce Keys:
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
Why: These keys specify programs that run automatically when the user or system starts. Attackers often place malicious programs in these keys to achieve persistence.
3. Lsa Security Keys:
Location: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa
Why: This registry key contains security settings like EnableLUA (User Account Control) and restrictanonymous (restrict anonymous access). Modifying these can disable important security features like UAC, making the system more vulnerable to privilege escalation attacks.
4. Windows Defender and Security Settings:
Location:
HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender
Why: Attackers may disable Windows Defender or other built-in security tools by modifying registry settings, allowing malware to run without detection.
5. System Integrity Settings (SMB, RDP, Network Settings):
Location:
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters (SMB settings)
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server (RDP settings)
Why: These keys control the remote desktop protocol and SMB settings, which are often targeted for lateral movement, brute-force attacks, or ransomware distribution.
6. Services Keys:
Location: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
Why: Attackers may modify or create new service entries to execute malicious binaries on startup. Monitoring these keys helps detect and prevent persistent malware from running.
7. Boot Configuration Keys:
Location: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager
Why: This key controls the boot configuration of the system. Attackers can use it to modify the boot-up behavior, such as introducing boot-time malware or disabling system recovery options.
8. Firewall and Network Policies:
Location: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy
Why: Modifying firewall rules via the registry could allow an attacker to open ports for malicious traffic, bypass network protections, or disable the firewall altogether.
9. Software Restriction Policies (AppLocker/Group Policies):
Location: HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\Safer\CodeIdentifiers
Why: These keys manage AppLocker and other software restriction policies. If compromised, they could allow unauthorized applications or scripts to run, bypassing security controls.
10. Audit Policies:
Location: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
Why: Registry changes to audit policies can disable logging of critical security events, which allows attackers to cover their tracks and evade detection.
Conclusion:
By protecting these registry keys, we can safeguard critical aspects of system security, such as logon processes, security policies, and automatic execution of programs. These keys are commonly targeted by attackers for persistence or disabling security features, so ensuring their integrity through Group Policy, auditing, and monitoring with SIEM tools is crucial to maintaining system security."

What you're asking for is damn near impossible. Registry keys get changed all the time, and even a fresh install of windows has millions of keys. **********************************************8

If I were to focus on any registry keys it's be the HKLM and HKCU run and runonce keys. If malware is going to use a registry key to establish persistence this is a common location because anything put here is going to run at system start-up.

One of the ways to mitigate is through monitoring for Windows Registry Changes. Enable auditing on the Windows Registry root keys and centralize logs from any Windows Event Log events that will fire off depending on the event. Below are associated events:
Event ID -Title
4656 — A handle to an object was requested
4657 — A registry value was modified
4658 — The handle to an object was closed
4660 — An object was deleted
4663 — An attempt was made to access an object
Log Tampering and Integrity Monitoring
Description: Include how attackers can attempt to manipulate or delete event logs to hide malicious activities and the importance of log integrity monitoring.
Importance: Tampered logs could compromise an investigation. Tools like Sysmon and File Integrity Monitoring (FIM) systems are often used to detect changes.
Scheduled Task and Service Monitoring
Description: Include monitoring scheduled tasks (Event ID 4697) and services for persistence mechanisms attackers use to maintain access.
Importance: Task Scheduler abuse is a common persistence technique, and monitoring these logs can detect such activities.

How a Proxy Helps:
Centralized Web Traffic Control: It inspects, filters, and logs all outgoing web requests from all machines.
Block Malicious Domains: Proxies can block requests to known malicious domains using threat intelligence feeds.
Generate Alerts: When traffic is detected to known or suspected malicious IPs or URLs, alerts can be sent to security teams.
Logging: Proxies log all web activity, allowing for retrospective analysis if an incident is reported (e.g., after a fake pop-up or malicious download).

A Next-Generation Firewall (NGFW) with Deep Packet Inspection (DPI) capabilities can help inspect outbound traffic from all machines and block or flag suspicious connections.

How a Firewall Helps:
Outbound Traffic Filtering: NGFWs can filter outgoing traffic and identify abnormal patterns, like connections to suspicious IP addresses or unusual ports.
DPI for Malware Detection: The firewall inspects outbound traffic for malicious content in real time, including downloads and file transfers.
Application Awareness: Modern firewalls can detect which application or process is making a request (e.g., Firefox vs. an unknown downloader).
Block Suspicious Domains/IPs: Firewalls can block outgoing traffic to known malicious domains using a constantly updated threat intelligence database
The Discretionary Access Control List (DACL) — in charge of allowing/denying access
The System Access Control List (SACL) — which for the most part is used for auditing when attempts of access are made to the target object.

The Security Account Manager (SAM) is a particular registry hive that stores credentials and account information for local users. User passwords are stored in a hashed format in the SAM registry hive either as an LM hash or an NT hash, depending on Group Policy settings.

Files within the System32 directory can potentially be involved in security events, especially if malicious scripts or binaries are executed, which might manipulate system processes.

How the System32 folder might be relevant to logging or monitoring:
Executable Files:

The System32 folder contains a variety of system executables, services, and dynamic link libraries (DLLs). These files can be launched during normal operation or by an attacker if compromised. Monitoring the execution of files in System32 can help detect malicious activities, like LOLBAS (Living off the Land Binaries and Scripts) or other techniques that misuse legitimate system binaries for malicious purposes.
Event Logs Related to Files in System32:

While the System32 folder doesn’t generate logs directly, activity involving files within System32 can trigger Windows Event Logs, such as:
Event ID 4688 (A new process has been created) – Logs when a process is executed, which includes any executable within System32.
Event ID 4689 (A process has exited) – Logs when a process running from System32 terminates.
File Access Logs (Audit Policy):

You can enable Audit Object Access on files within System32 to track access to specific files. This requires configuring Object Access Auditing through Group Policy or Local Security Policy.
Malware and Process Injection:

Malicious software may attempt to inject itself into or replace legitimate System32 binaries for persistence. Monitoring for unusual processes running from this directory, or changes to system files in System32, can help detect fileless malware or rootkits.

NT Hash (NTLM Hash)
The NT (New Technology) or NTLM Hash is a more secure hashing mechanism used in Windows NT and later versions, including modern systems.

It is based on the MD4 hashing algorithm and supports passwords of virtually unlimited length and mixed case.

Unlike LM Hash, the NTLM Hash does not convert passwords to uppercase and is significantly harder to crack, although still not considered fully secure against modern, resource-intensive attacks.

Structure of NT Hash:

The password is processed using the MD4 hashing algorithm, producing a 128-bit hash value.
NTLM Authentication:

NTLM (NT LAN Manager) is a Microsoft security protocol suite that uses the NT Hash for user authentication.
NTLM has two versions: NTLMv1 (older, less secure) and NTLMv2 (more secure and widely used in modern systems).

============================================ LOLBAS Rules ==================================================
The rules in this section detect suspicious behavior related to operating system binaries.

Unusual child processes and DLL loads
Detect starts from non-default locations
Detect proxy execution
Detect UAC bypass
Detect csc/jsc compile
Detect execute from alternate data streams
Detect AWL bypass
Detect encode and decode operations
Detect copy operations
Detect download operations
=======================================================================================================================================
OS Credential Dumping- LSASS Memory vs Windows Logs
Credential dumping is the process of obtaining account login and password information,
normally in the form of a hash or a clear text password, from the operating system and software. 
Credentials can then be used to perform Lateral Movement and access restricted information.
we have the rule to detect it with lsass memory. But still, we are missing more peculiar rules which may evade AV/EDR. 
Those are the techniques listed below:

Suspicious Access to LSASS Memory (Credential Dumping)
Attackers often attempt to dump the contents of LSASS memory to extract credentials. Tools like Mimikatz, ProcDump, and Task Manager may be used to access LSASS memory.

Memory access monitoring: EDRs detect when a non-privileged or suspicious process tries to access the memory of LSASS. This is abnormal behavior and triggers alerts. Some EDRs prevent access to LSASS memory unless specifically allowed (e.g., legitimate debugging).

API call monitoring: EDRs can detect the use of functions such as MiniDumpWriteDump (used to create process dumps) or ReadProcessMemory, which are commonly employed in credential dumping attacks.

Process injection: EDRs detect attempts to inject code into LSASS or other processes to perform credential theft.

Command-line activity: EDRs track tools like ProcDump, Task Manager, or rundll32 being used with suspicious command-line arguments that indicate LSASS memory dumping.

MITRE ATT&CK mapping: Many EDRs map these actions to techniques such as T1003: Credential Dumping from the MITRE ATT&CK framework.

b. Anomalous LSASS Behavior
Process spawning: EDRs flag suspicious processes that spawn from or interact with LSASS. For example, if cmd.exe or powershell.exe attempts to access LSASS or create dumps, this could trigger an alert.

Code execution alerts: When tools or malware attempt to execute code in LSASS, EDRs use behavioral analysis to detect and block such operations.

c. Known Malware Detection
EDRs often include threat intelligence feeds that help identify known malware and toolkits used to dump LSASS, such as Mimikatz or specific process dumping utilities. These are flagged based on signatures, heuristics, or behavior analysis.

Windows Event Logs (Security and Sysmon)
Windows generates security-related event logs that are collected and analyzed by SIEMs. Some key event logs related to LSASS attacks include:

Event ID 4624 (Successful logon): LSASS is involved in logon events. SIEM can detect patterns where multiple failed login attempts (Event ID 4625) are followed by a successful login, indicating a possible brute-force or credential stuffing attack.

Event ID 4673 (Sensitive privilege use): This logs when privileged processes (like LSASS) attempt to perform tasks. SIEM systems can detect suspicious use of sensitive privileges and alert on unusual access to LSASS or its memory.

Event ID 4656 (Handle to an object requested): This event is logged when a process requests access to another process or object. SIEMs can detect unauthorized attempts to access LSASS memory.

Sysmon Event ID 10 (Process access): This event logs when one process opens another for reading or execution. SIEMs can monitor for processes attempting to open LSASS for memory reading.

EDR Rule:
Rule Name: Detect LSASS Memory Access (Credential Dumping)
Logic: Alert when MiniDumpWriteDump or ReadProcessMemory API calls are used to access the memory of lsass.exe by unauthorized processes or tools like procdump.exe or mimikatz.exe.
SIEM Rule:
Rule Name: Detect LSASS Process Dumping Attempts
Logic: Trigger an alert if:
Sysmon Event ID 10 (Process access) shows a non-system process accessing LSASS.
Event ID 4688 (Process creation) logs the execution of known dumping tools (e.g., procdump.exe, mimikatz.exe) targeting lsass.exe.
Event ID 4656 (Handle request) logs unauthorized access to LSASS.

Need to have a detection rule with parent process name as “COMSVCS.DLL” and loading process should be “runDLL32” with a condition of loading process NOT EQUAL TO “COMSVCS.DLL” along with the Sysmon Event ID 7.
================================================================================================================================================
sysmon documentation
Sysinternals File and Disk Utilities
AccessChk
This tool shows you the accesses the user or group you specify has to files, Registry keys
or Windows services.

Sigcheck is a command-line utility that shows file version number, timestamp
information, and digital signature details, including certificate chains. It also includes an
option to check a file’s status on VirusTotal , a site that performs automated file
scanning against over 40 antivirus engines, and an option to upload a file for scanning.

Sysinternals Networking Utilities
Active Directory Explorer (AD Explorer) is an advanced Active Directory (AD) viewer and
editor. You can use AD Explorer to easily navigate an AD database, define favorite
locations, view object properties and attributes without having to open dialog boxes,
edit permissions, view an object's schema, and execute sophisticated searches that you
can save and re-execute.

TCPView is a Windows program that will show you detailed listings of all TCP and UDP
endpoints on your system, including the local and remote addresses and state of TCP
connections.
When you start TCPView it will enumerate all active TCP and UDP endpoints, resolving
all IP addresses to their domain name versions. You can use a toolbar button or menu
item to toggle the display of resolved names. TCPView shows the name of the process
that owns each endpoint, including the service name (if any).
By default, TCPView updates every second, but you can use the Options|Refresh Rate
menu item to change the rate. Endpoints that change state from one update to the next
are highlighted in yellow; those that are deleted are shown in red, and new endpoints
are shown in green.
You can close established TCP/IP connections (those labeled with a state of
ESTABLISHED) by selecting File|Close Connections, or by right-clicking on a connection
and choosing Close Connections from the resulting context menu.
You can save TCPView's output window to a file using the Save menu item.

Sysinternals Process Utilities

autoruns
This utility, which has the most comprehensive knowledge of auto-starting locations of
any startup monitor, shows you what programs are configured to run during system
bootup or login, and when you start various built-in Windows applications like Internet
Explorer, Explorer and media players. These programs and drivers include ones in your
startup folder, Run, RunOnce, and other Registry keys. Autoruns reports Explorer shell
extensions, toolbars, browser helper objects, Winlogon notifications, auto-start services,
and much more. Autoruns goes way beyond other autostart utilities.

Yes, you're correct! Sysmon is the only tool within the Sysinternals suite that continuously generates logs, while the other tools in the suite are primarily used for manual, real-time analysis and troubleshooting. Here's a breakdown:
Sysmon (System Monitor):
Generates logs continuously: Sysmon installs as a system service and records detailed logs about system activities, such as process creation, network connections, file modifications, and registry changes.
Log Output: Sysmon writes these events to the Windows Event Log, which can be forwarded to a SIEM or centralized logging solution for real-time monitoring and detection of suspicious activity.
Purpose: Used for long-term monitoring and detection of potential threats based on system activities.

rocess Explorer, Autoruns, Process Monitor, TCPView, etc. are tools designed for manual, on-the-spot investigations. They do not generate continuous logs or monitor activities over time like Sysmon.
Real-Time Usage: These tools give SOC analysts a detailed, real-time look into system processes, startup programs, network connections, and file or registry activity when needed.
Manual Log Export: Some tools (like Process Monitor and Autoruns) allow you to manually save data or snapshots for further analysis, but this is not continuous logging.

System Monitor (Sysmon) is a Windows system service and device driver that, once
installed on a system, remains resident across system reboots to monitor and log system
activity to the Windows event log. It provides detailed information about process
creations, network connections, and changes to file creation time. By collecting the
events it generates using Windows Event Collection or SIEM agents and
subsequently analyzing them, you can identify malicious or anomalous activity and
understand how intruders and malware operate on your network. The service runs as a
protected process, thus disallowing a wide range of user mode interactions.
Note that Sysmon does not provide analysis of the events it generates, nor does it
attempt to hide itself from attackers.

Overview of Sysmon Capabilities

Logs process creation with full command line for both current and parent
processes.
Records the hash of process image files using SHA1 (the default), MD5, SHA256 or
IMPHASH.
Multiple hashes can be used at the same time.
Includes a process GUID in process create events to allow for correlation of events
even when Windows reuses process IDs.
Includes a session GUID in each event to allow correlation of events on same logon
session.
Logs loading of drivers or DLLs with their signatures and hashes.
Logs opens for raw read access of disks and volumes.Optionally logs network connections, including each connection’s source process,
IP addresses, port numbers, hostnames and port names.
Detects changes in file creation time to understand when a file was really created.
Modification of file create timestamps is a technique commonly used by malware
to cover its tracks.
Automatically reload configuration if changed in the registry.
Rule filtering to include or exclude certain events dynamically.
Generates events from early in the boot process to capture activity made by even
sophisticated kernel-mode malware.
Sysmon is particularly useful because:

It logs detailed process creation events, including command-line arguments, parent processes, and hashes of executables.
It provides file creation time changes and network connection details not logged by default in Windows.
It monitors for events related to registry changes, file integrity, and more.
It is highly configurable, allowing you to control exactly which events are captured.
Sysmon logs are recorded in the Windows Event Log, specifically under the following log path:
Location in Event Viewer: Applications and Services Logs -> Microsoft -> Windows -> Sysmon -> Operational.
Yes, Sysmon logs are different and more detailed compared to standard logs that Windows natively provides. Here are some key differences:

Windows Event Viewer logs (default without Sysmon) include basic system events like logons, logoffs, service startups, process crashes, etc. These logs are useful but may lack the rich detail needed for in-depth security monitoring.

Sysmon logs provide much more detailed information about system activity, such as:

Process creation: Logs details of newly started processes, including hash values and command-line arguments.
Network connections: Logs all network connections with details about the source and destination IP addresses, port numbers, and the process responsible for the connection.
File and registry changes: Tracks important modifications, such as file creation times or registry key changes.
These logs are much more security-focused and provide a richer dataset for detecting suspicious activity.
Splunk: Configure the Universal Forwarder to monitor the Sysmon log file in inputs.conf.

for splunk
Copy code
[WinEventLog://Microsoft-Windows-Sysmon/Operational]
disabled = 0
index = sysmon
renderXml = true   
Yes, in the context of the Splunk Universal Forwarder configuration file, the setting disabled = 0 means that the log collection is enabled.

disabled = 0: This tells Splunk to enable the collection of logs from the specified source, in this case, the Sysmon Event Log (Microsoft-Windows-Sysmon/Operational).

disabled = 1: This would disable the log collection for that source, meaning Splunk would not collect logs from the specified source.

winlogbeat.event_logs:
  - name: Microsoft-Windows-Sysmon/Operational

sysmon events total 29 
 
event id 1 process creation

The process creation event provides extended information about a newly created
process The full command line provides context on the process execution. The
ProcessGUID field is a unique value for this process across a domain to make event
correlation easier. The hash is a full hash of the file with the algorithms in the HashType
field.
Event ID 2: A process changed a file creation time
This event helps tracking the real creation time of a file. Attackers
may change the file creation time of a backdoor to make it look like it was installed with
the operating system. Note that many processes legitimately change the creation time
of a file; it does not necessarily indicate malicious activity.
Event ID 3: Network connection
Each connection is linked to a process through the ProcessId and
ProcessGuid fields. The event also contains the source and destination host names IP
addresses, port numbers and IPv6 status
Event ID 4: Sysmon service state changed
The service state change event reports the state of the Sysmon service (started or
stopped).
Event ID 5: Process terminated
The process terminate event reports when a process terminates. It provides the UtcTime ,
ProcessGuid and ProcessId of the process.
Event ID 6: Driver loaded
Event ID 7: Image loaded . This event should be configured carefully, as monitoring all image load
events will generate a significant amount of logging.
Event ID 8: CreateRemoteThread
The CreateRemoteThread event detects when a process creates a thread in another
process. This technique is used by malware to inject code and hide in other processes.
The event indicates the source and target process. It gives information on the code that
will be run in the new thread: StartAddress , StartModule and StartFunction . Note that
StartModule and StartFunction fields are inferred, they might be empty if the starting
address is outside loaded modules or known exported functions.
Event ID 9: RawAccessRead
The RawAccessRead event detects when a process conducts reading operations from the
drive using the \\.\ denotation. This technique is often used by malware for data
exfiltration of files that are locked for reading, as well as to avoid file access auditing
tools. The event indicates the source process and target device
Event ID 10: ProcessAccess
The process accessed event reports when a process opens another process, an
operation that’s often followed by information queries or reading and writing the
address space of the target process. This enables detection of hacking tools that read
the memory contents of processes like Local Security Authority (Lsass.exe) in order to
steal credentials for use in Pass-the-Hash attacks. Enabling it can generate significant
amounts of logging if there are diagnostic utilities active that repeatedly open processes
to query their state, so it generally should only be done so with filters that remove
expected accesses.
Event ID 11: FileCreate
File create operations are logged when a file is created or overwritten. This event is
useful for monitoring autostart locations, like the Startup folder, as well as temporary
and download directories, which are common places malware drops during initial
infection.
Event ID 12: RegistryEvent (Object create and delete)
Registry key and value create and delete operations map to this event type, which can
be useful for monitoring for changes to Registry autostart locations, or specific malware
registry modifications.
Key name Abbreviation
HKEY_LOCAL_MACHINE HKLM
HKEY_USERS HKU
HKEY_LOCAL_MACHINE\System\ControlSet00x HKLM\System\CurrentControlSet
HKEY_LOCAL_MACHINE\Classes HKCR

Event ID 13: RegistryEvent (Value Set)
This Registry event type identifies Registry value modifications. The event records the
value written for Registry values of type DWORD and QWORD .
Event ID 14: RegistryEvent (Key and Value Rename)
Registry key and value rename operations map to this event type, recording the new
name of the key or value that was renamed
Event ID 15: FileCreateStreamHash
There are malware variants that drop their
executables or configuration settings via browser downloads, and this event is aimed at
capturing that based on the browser attaching a Zone.Identifier "mark of the web"
stream.
ID Tag Event
1 ProcessCreate Process Create
2 FileCreateTime File creation time
3 NetworkConnect Network connection detected
4 n/a Sysmon service state change (cannot be filtered)
5 ProcessTerminate Process terminated
6 DriverLoad Driver Loaded
7 ImageLoad Image loaded
8 CreateRemoteThread CreateRemoteThread detected
9 RawAccessRead RawAccessRead detected
10 ProcessAccess Process accessed
11 FileCreate File created
12 RegistryEvent Registry object added or deleted
13 RegistryEvent Registry value set
14 RegistryEvent Registry object renamed
15 FileCreateStreamHash File stream created
16 n/a Sysmon configuration change (cannot be filtered)
17 PipeEvent Named pipe created
18 PipeEvent Named pipe connected
19 WmiEvent WMI filter
20 WmiEvent WMI consumer
21 WmiEvent WMI consumer filter
22 DNSQuery DNS query
23 FileDelete File Delete archived
24 ClipboardChange New content in the clipboard
25 ProcessTampering Process image change
26 FileDeleteDetected File Delete logged
27 FileBlockExecutable File Block Executable
28 FileBlockShredding File Block Shredding
29 FileExecutableDetected File Executable Detected




































































































































































































































































































































































































































































































































